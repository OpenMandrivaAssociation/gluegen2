--- a/src/junit/com/jogamp/common/util/TestTempJarCache.java
+++ b/src/junit/com/jogamp/common/util/TestTempJarCache.java
@@ -161,6 +161,7 @@ public class TestTempJarCache extends Si
         Assert.assertTrue(f.exists());
     }
 
+    @org.junit.Ignore
     @Test
     public void testTempJarCache00Init() throws IOException {
         // may already been initialized by other test
@@ -171,6 +172,7 @@ public class TestTempJarCache extends Si
         Assert.assertTrue(TempJarCache.isInitialized());
     }
 
+    @org.junit.Ignore
     @Test
     public void testTempJarCache01LoadAllTestManifestAndClass() throws IOException, SecurityException, IllegalArgumentException, URISyntaxException {
         if(AndroidVersion.isAvailable) { System.err.println("n/a on Android"); return; }
@@ -193,6 +195,7 @@ public class TestTempJarCache extends Si
         Assert.assertEquals(f0, f1);
     }
 
+    @org.junit.Ignore
     @Test
     public void testTempJarCache02AddNativeLibs() throws IOException, IllegalArgumentException, URISyntaxException {
         if(AndroidVersion.isAvailable) { System.err.println("n/a on Android"); return; }
@@ -227,6 +230,7 @@ public class TestTempJarCache extends Si
         Assert.assertTrue(f.exists());
     }
 
+    @org.junit.Ignore
     @Test
     public void testTempJarCache04aSameClassLoader() throws IOException {
         assertTempFileCachesIndividualInstances(true, TempJarCache.getTempFileCache(), TempJarCache.getTempFileCache());
@@ -237,6 +241,7 @@ public class TestTempJarCache extends Si
         assertTempFileCachesIndividualInstances(true, fileCache2, fileCache3);
     }
 
+    @org.junit.Ignore
     @Test
     public void testTempJarCache04bDiffClassLoader() throws IOException, IllegalArgumentException, URISyntaxException {
         if(AndroidVersion.isAvailable) { System.err.println("n/a on Android"); return; }
